<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.martinklein.co//feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.martinklein.co//" rel="alternate" type="text/html" /><updated>2022-10-08T15:08:45+02:00</updated><id>https://www.martinklein.co//feed.xml</id><title type="html">Martin Klein</title><subtitle>Associate for energy scenarios at 50Hertz, Berlin. PhD in energy systems analysis. Thinking about ways to get the economy to net-zero emissions.</subtitle><entry><title type="html">Tetc</title><link href="https://www.martinklein.co//2022/10/08/second-test-post.html" rel="alternate" type="text/html" title="Tetc" /><published>2022-10-08T00:00:00+02:00</published><updated>2022-10-08T00:00:00+02:00</updated><id>https://www.martinklein.co//2022/10/08/second-test-post</id><content type="html" xml:base="https://www.martinklein.co//2022/10/08/second-test-post.html">&lt;p&gt;Wow, here is another post that I would like to check out. I will not know if the image sharing works until I try it out.&lt;/p&gt;</content><author><name></name></author><category term="python" /><summary type="html">Wow, here is another post that I would like to check out. I will not know if the image sharing works until I try it out.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.martinklein.co//data/learning_curves.jpeg" /><media:content medium="image" url="https://www.martinklein.co//data/learning_curves.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Test-title?</title><link href="https://www.martinklein.co//2022/10/08/test-post.html" rel="alternate" type="text/html" title="Test-title?" /><published>2022-10-08T00:00:00+02:00</published><updated>2022-10-08T00:00:00+02:00</updated><id>https://www.martinklein.co//2022/10/08/test-post</id><content type="html" xml:base="https://www.martinklein.co//2022/10/08/test-post.html">&lt;p&gt;Test post etc. Here is text and some more. I want this to show up. Is this not enough?&lt;/p&gt;

&lt;meta property=&quot;og:image&quot; content=&quot;https://www.martinklein.co//data/learning_curves.jpeg&quot; /&gt;</content><author><name></name></author><category term="python" /><summary type="html">Test post etc. Here is text and some more. I want this to show up. Is this not enough?</summary></entry><entry><title type="html">Where are the batteries?</title><link href="https://www.martinklein.co//2022/10/07/battery-map-germany.html" rel="alternate" type="text/html" title="Where are the batteries?" /><published>2022-10-07T00:00:00+02:00</published><updated>2022-10-07T00:00:00+02:00</updated><id>https://www.martinklein.co//2022/10/07/battery-map-germany</id><content type="html" xml:base="https://www.martinklein.co//2022/10/07/battery-map-germany.html">&lt;p&gt;We are entering the age of megawatt-scale batteries. I was wondering how far we have come in Germany, so I created a map showing the latest projects.&lt;/p&gt;

&lt;iframe src=&quot;/data/battery_map_germany.html&quot; height=&quot;600&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;/data/battery_map_germany.html&quot; target=&quot;_blank&quot;&gt;View in full-screen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used data from &lt;a href=&quot;https://www.marktstammdatenregister.de/&quot; target=&quot;_blank&quot;&gt;Marktstammdatenregister&lt;/a&gt; &lt;a href=&quot;https://www.govdata.de/dl-de/by-2-0&quot; target=&quot;_blank&quot;&gt;(license)&lt;/a&gt;, which is fairly easy to filter and retrieve. 
You can check out my source code &lt;a href=&quot;https://github.com/0-k/energy_maps&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, where the filters are explained in a bit more detail. The project uses the &lt;a href=&quot;http://python-visualization.github.io/folium/&quot; target=&quot;_blank&quot;&gt;folium&lt;/a&gt; package, which is a nice Python wrapper around leaflet.js.&lt;/p&gt;</content><author><name></name></author><category term="python" /><summary type="html">We are entering the age of megawatt-scale batteries. I was wondering how far we have come in Germany, so I created a map showing the latest projects.</summary></entry><entry><title type="html">Interviewing GPT-3 - On science</title><link href="https://www.martinklein.co//2022/07/04/interview-gpt3-science.html" rel="alternate" type="text/html" title="Interviewing GPT-3 - On science" /><published>2022-07-04T00:00:00+02:00</published><updated>2022-07-04T00:00:00+02:00</updated><id>https://www.martinklein.co//2022/07/04/interview-gpt3-science</id><content type="html" xml:base="https://www.martinklein.co//2022/07/04/interview-gpt3-science.html">&lt;p&gt;I interviewed GPT-3, an extensive &lt;a href=&quot;https://openai.com/api/&quot;&gt;language model&lt;/a&gt; by OpenAI, and asked it some questions on science and collaboration.
Welcome to my first machine interview. We have come a long way.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://futureoflife.org/2015/11/05/90-of-all-the-scientists-that-ever-lived-are-alive-today/&quot;&gt;90% of all the scientists that ever lived are alive today&lt;/a&gt;. GPT-3, is scientific discovery accelerating?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GPT-3&lt;/em&gt;: That is a difficult question to answer definitively. However, there are some indications that scientific discovery may be accelerating. For example, the number of scientific papers published each year has been increasing steadily for several decades, and the rate of increase appears to be accelerating. In addition, the number of patents issued each year has also been growing steadily. The rate of growth seems to be accelerating. Finally, the amount of money spent on research and development has been increasing steadily for many years, indicating that more and more resources are being devoted to scientific discovery.
 &lt;br /&gt;
 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is this enough to argue that we are getting better at discovering new and valuable things?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GPT-3:&lt;/em&gt; One problem is that measuring the rate of scientific discovery is difficult. Many important discoveries are made by accident, and it is often hard to say how long it would have taken to make those discoveries if we had not been looking for them. In addition, it is often hard to say how significant a particular finding is. Some discoveries may be significant but not widely known, while others may be widely known but not very important.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What would be an example of scientific progress that was unreachable 100 years ago?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GPT-3:&lt;/em&gt; Some examples of scientific progress that was unreachable 100 years ago include the discovery of the structure of DNA, the development of vaccines for diseases like polio and smallpox, the understanding of the nature of the universe, and the development of computers and the internet.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Has the internet made the body of science one large cyber-connected being?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GPT-3:&lt;/em&gt; The internet has definitely made the body of science more interconnected. Scientists can now communicate and collaborate with each other much more easily than they could in the past. They can also access a vast amount of information that is available online. However, it is important to remember that not all scientists have equal access to the internet, and that some areas of science are still very isolated from each other. In some ways, the body of science can be seen as an extensive, interconnected system. For example, scientists build on each otherâ€™s work, share data and ideas, and collaborate on research projects. In other ways, the body of science may be more like a collection of individual pieces that are only loosely connected.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can we connect those pieces more firmly then?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GPT-3:&lt;/em&gt; One possibility is to encourage more collaboration and communication between scientists. Another option is to develop better ways of organizing and storing scientific data to be more easily accessed and used by other scientists.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can we achieve that? Who do we handle and share data better?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GPT-3:&lt;/em&gt; There are several ways to handle and share data better. One possibility is to develop better methods for storing, organizing, and sharing data. Another possibility is to create more opportunities for scientists to collaborate. One way to achieve better data sharing would be to develop standard formats for storing and sharing data. Another way would be to create incentives for scientists to share their data.
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can you give an example?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GPT-3:&lt;/em&gt; One example of an incentive for scientists to share their data is the open-access movement. The open-access movement is a push for scientific journals to make their articles available online for anyone to read, without requiring a subscription. This would allow any scientist with an internet connection to access the latest research, regardless of where they work or what resources they have. Another example is the creation of online platforms allowing scientists to share data and ideas.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This interview has been edited for length and clarity.&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="tech" /><category term="gpt" /><category term="interview" /><summary type="html">I interviewed GPT-3, an extensive language model by OpenAI, and asked it some questions on science and collaboration. Welcome to my first machine interview. We have come a long way.</summary></entry><entry><title type="html">Shopifyâ€™s API via GraphQL in Python</title><link href="https://www.martinklein.co//2022/03/01/shopify-graphql-python.html" rel="alternate" type="text/html" title="Shopifyâ€™s API via GraphQL in Python" /><published>2022-03-01T00:00:00+01:00</published><updated>2022-03-01T00:00:00+01:00</updated><id>https://www.martinklein.co//2022/03/01/shopify-graphql-python</id><content type="html" xml:base="https://www.martinklein.co//2022/03/01/shopify-graphql-python.html">&lt;p&gt;GraphQL is a query language for APIs. It allows to define the structure of the requested data, which makes it possible to avoid returning overly large amounts of data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://shopify.dev/api/admin-graphql#top&quot;&gt;Shopifyâ€™s Admin API can be queried with GraphQL&lt;/a&gt;. GraphQL queries are executed by sending POST HTTP requests. This can be achieved in Python with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; module like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;https://your-shops-name.myshopify.com/admin/api/2022-01/graphql.json&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/graphql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&quot;X-Shopify-Access-Token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YOUR_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Set your API access keyword in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOUR_ACCESS_TOKEN&lt;/code&gt;. There are many examples given on how to structure the queries. Here is a simple example to get your 10 latest orders and their respective IDs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;your_query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
{
  orders(first: 10) {
    edges {
      node {
        id
      }
    }
  }
}
&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Happy querying!&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="graphql" /><category term="shopify" /><summary type="html">GraphQL is a query language for APIs. It allows to define the structure of the requested data, which makes it possible to avoid returning overly large amounts of data.</summary></entry><entry><title type="html">JSON and pandas DataFrame</title><link href="https://www.martinklein.co//2022/02/22/json-pandas.html" rel="alternate" type="text/html" title="JSON and pandas DataFrame" /><published>2022-02-22T00:00:00+01:00</published><updated>2022-02-22T00:00:00+01:00</updated><id>https://www.martinklein.co//2022/02/22/json-pandas</id><content type="html" xml:base="https://www.martinklein.co//2022/02/22/json-pandas.html">&lt;p&gt;JSON (JavaScript Object Notion) is a handy and human-readable file format to exchange data over the internet. pandas DataFrames are &lt;em&gt;the&lt;/em&gt; way to handle tabular data in Python. So the natural question is how to convert between the two formats.&lt;/p&gt;

&lt;p&gt;Converting a pandas DataFrame to a JSON object is straight-forward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;index&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orient&lt;/code&gt; parameter controls how the &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html&quot;&gt;data is formatted&lt;/a&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; worked well for my use cases so far.&lt;/p&gt;

&lt;p&gt;The other conversion direction is very similar:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your_json_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;index&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you receive your JSON as a string in Python (e.g. through a request from an API), you must first convert the string into a JSON object for the above call to work:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;your_json_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_as_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="python" /><summary type="html">JSON (JavaScript Object Notion) is a handy and human-readable file format to exchange data over the internet. pandas DataFrames are the way to handle tabular data in Python. So the natural question is how to convert between the two formats.</summary></entry><entry><title type="html">LaTex in Jekyll</title><link href="https://www.martinklein.co//2022/02/18/latex-in-jekyll.html" rel="alternate" type="text/html" title="LaTex in Jekyll" /><published>2022-02-18T00:00:00+01:00</published><updated>2022-02-18T00:00:00+01:00</updated><id>https://www.martinklein.co//2022/02/18/latex-in-jekyll</id><content type="html" xml:base="https://www.martinklein.co//2022/02/18/latex-in-jekyll.html">&lt;p&gt;&lt;a href=&quot;http://docs.mathjax.org/en/v2.7-latest/start.html#using-a-content-delivery-network-cdn&quot;&gt;MathJax&lt;/a&gt; allows you to include mathematics in your web pages, e.g. by using LaTeX. The formulae will be processed using JavaScript to produce HTML, SVG, or MathML equations for viewing in any modern browser.&lt;/p&gt;

&lt;p&gt;Itâ€™s very easy to include it into your Jekyll posts. Add the following script to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/post.html&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;VoilÃ , you should be good to go. If you now type in your post:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;it will render nicely as &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler%27s_identity&quot;&gt;Eulerâ€™s identity&lt;/a&gt; as we all know it:
\(e^{i\pi} + 1 = 0\).&lt;/p&gt;

&lt;p&gt;Cool! Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$$&lt;/code&gt; is required at the beginning and end. It will signify the start and end of the formula formatting.&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="jekyll" /><category term="latex" /><summary type="html">MathJax allows you to include mathematics in your web pages, e.g. by using LaTeX. The formulae will be processed using JavaScript to produce HTML, SVG, or MathML equations for viewing in any modern browser.</summary></entry><entry><title type="html">Teaching computers to see</title><link href="https://www.martinklein.co//2021/09/08/vision.html" rel="alternate" type="text/html" title="Teaching computers to see" /><published>2021-09-08T00:00:00+02:00</published><updated>2021-09-08T00:00:00+02:00</updated><id>https://www.martinklein.co//2021/09/08/vision</id><content type="html" xml:base="https://www.martinklein.co//2021/09/08/vision.html">&lt;p&gt;Applying a computer vision algorithm to some iconic and some not so iconic images.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/hopper_new.jpg&quot; alt=&quot;Edward Hopper - Nighthawks. 4 persons, 1 bottle&quot; title=&quot;Edward Hopper - Nighthawks. 4 persons, 1 bottle&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/Aldrin_Apollo_11_new.jpg&quot; alt=&quot;Buzz Aldrin - Apollo 11. 1 person&quot; title=&quot;Buzz Aldrin - Apollo 11. 1 person&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/17_juni_new.jpg&quot; alt=&quot;Revolt of 17th of June 1953, Berlin. 3 persons&quot; title=&quot;Revolt of 17th of June 1953, Berlin. 3 persons&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/bedroom_new.jpg&quot; alt=&quot;Vincent van Gogh - The Bedroom. 1 bed&quot; title=&quot;Vincent van Gogh - The Bedroom. 1 bed&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/camouflage_new.jpg&quot; alt=&quot;2 soldiers in camouflage. Potted plant, elephant, person, giraffe.&quot; title=&quot;2 soldiers in camouflage. Potted plant, elephant, person, giraffe.&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/Pieter_Bruegel_new.jpg&quot; alt=&quot;Pieter Bruegel - Childrenâ€™s Games. Many persons&quot; title=&quot;Pieter Bruegel - Childrenâ€™s Games. Many persons&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/xian_new.jpg&quot; alt=&quot;Terracotta Army, China. Many persons&quot; title=&quot;Terracotta Army, China. Many persons&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="art" /><category term="ml" /><summary type="html">Applying a computer vision algorithm to some iconic and some not so iconic images.</summary></entry></feed>