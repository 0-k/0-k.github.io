<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.martinklein.co/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.martinklein.co/" rel="alternate" type="text/html" /><updated>2023-05-02T23:19:38+02:00</updated><id>https://www.martinklein.co/feed.xml</id><title type="html">Martin Klein</title><subtitle>PhD in energy systems analysis. Thinking about ways to get the economy to net-zero emissions.</subtitle><entry><title type="html">Where are the batteries?</title><link href="https://www.martinklein.co/2022/10/07/battery-map-germany.html" rel="alternate" type="text/html" title="Where are the batteries?" /><published>2022-10-07T00:00:00+02:00</published><updated>2022-10-07T00:00:00+02:00</updated><id>https://www.martinklein.co/2022/10/07/battery-map-germany</id><content type="html" xml:base="https://www.martinklein.co/2022/10/07/battery-map-germany.html">&lt;p&gt;We are entering the age of megawatt-scale batteries. I wondered how far we have come in Germany, so I created this map showing the latest projects.&lt;/p&gt;

&lt;iframe src=&quot;/data/battery_map_germany.html&quot; height=&quot;600&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;/data/battery_map_germany.html&quot; target=&quot;_blank&quot;&gt;View in full-screen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The map shows all battery projects (installed or concretely planned) with a rated power of at least 1 MW, according to the &lt;a href=&quot;https://www.marktstammdatenregister.de/&quot; target=&quot;_blank&quot;&gt;Marktstammdatenregister&lt;/a&gt;. 
I was surprised to find already almost 1 GW of large-scale battery capacity distributed all over the country. Most of them are li-ion batteries. The projects’ average energy-to-power (E/P) ratio is around 1.3 h. I find it interesting to scroll through the list of operators - lots of big names but also projects that seem connected to a local municipality or solar park operator.
As far as I know, the batteries are still mainly operating in the balancing markets, but some projects are adjacent to significant wind and solar projects, so that you could use them for feed-in management.&lt;/p&gt;

&lt;p&gt;The data (which has an open &lt;a href=&quot;https://www.govdata.de/dl-de/by-2-0&quot;&gt;license&lt;/a&gt;, by the way) was pretty easy to filter and retrieve. You can check out the source code &lt;a href=&quot;https://github.com/0-k/energy_maps&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, where I described the data operations in more detail. 
The project uses the &lt;a href=&quot;http://python-visualization.github.io/folium/&quot; target=&quot;_blank&quot;&gt;folium&lt;/a&gt; package, a nice Python wrapper around leaflet.js.&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="energy" /><summary type="html">We are entering the age of megawatt-scale batteries. I wondered how far we have come in Germany, so I created this map showing the latest projects.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.martinklein.co/data/preview/battery-map-germany.jpg" /><media:content medium="image" url="https://www.martinklein.co/data/preview/battery-map-germany.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Shopify’s API via GraphQL in Python</title><link href="https://www.martinklein.co/2022/03/01/shopify-graphql-python.html" rel="alternate" type="text/html" title="Shopify’s API via GraphQL in Python" /><published>2022-03-01T00:00:00+01:00</published><updated>2022-03-01T00:00:00+01:00</updated><id>https://www.martinklein.co/2022/03/01/shopify-graphql-python</id><content type="html" xml:base="https://www.martinklein.co/2022/03/01/shopify-graphql-python.html">&lt;p&gt;GraphQL is a query language for APIs. It allows to define the structure of the requested data, which makes it possible to avoid returning overly large amounts of data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://shopify.dev/api/admin-graphql#top&quot;&gt;Shopify’s Admin API can be queried with GraphQL&lt;/a&gt;. GraphQL queries are executed by sending POST HTTP requests. This can be achieved in Python with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; module like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;https://your-shops-name.myshopify.com/admin/api/2022-01/graphql.json&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/graphql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&quot;X-Shopify-Access-Token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YOUR_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Set your API access keyword in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YOUR_ACCESS_TOKEN&lt;/code&gt;. There are many examples given on how to structure the queries. Here is a simple example to get your 10 latest orders and their respective IDs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;your_query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
{
  orders(first: 10) {
    edges {
      node {
        id
      }
    }
  }
}
&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Happy querying!&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="graphql" /><category term="shopify" /><summary type="html">GraphQL is a query language for APIs. It allows to define the structure of the requested data, which makes it possible to avoid returning overly large amounts of data.</summary></entry><entry><title type="html">JSON and pandas DataFrame</title><link href="https://www.martinklein.co/2022/02/22/json-pandas.html" rel="alternate" type="text/html" title="JSON and pandas DataFrame" /><published>2022-02-22T00:00:00+01:00</published><updated>2022-02-22T00:00:00+01:00</updated><id>https://www.martinklein.co/2022/02/22/json-pandas</id><content type="html" xml:base="https://www.martinklein.co/2022/02/22/json-pandas.html">&lt;p&gt;JSON (JavaScript Object Notion) is a handy and human-readable file format to exchange data over the internet. pandas DataFrames are &lt;em&gt;the&lt;/em&gt; way to handle tabular data in Python. So the natural question is how to convert between the two formats.&lt;/p&gt;

&lt;p&gt;Converting a pandas DataFrame to a JSON object is straight-forward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;index&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orient&lt;/code&gt; parameter controls how the &lt;a href=&quot;https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html&quot;&gt;data is formatted&lt;/a&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; worked well for my use cases so far.&lt;/p&gt;

&lt;p&gt;The other conversion direction is very similar:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;your_json_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;index&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you receive your JSON as a string in Python (e.g. through a request from an API), you must first convert the string into a JSON object for the above call to work:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;your_json_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_as_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="python" /><summary type="html">JSON (JavaScript Object Notion) is a handy and human-readable file format to exchange data over the internet. pandas DataFrames are the way to handle tabular data in Python. So the natural question is how to convert between the two formats.</summary></entry><entry><title type="html">LaTex in Jekyll</title><link href="https://www.martinklein.co/2022/02/18/latex-in-jekyll.html" rel="alternate" type="text/html" title="LaTex in Jekyll" /><published>2022-02-18T00:00:00+01:00</published><updated>2022-02-18T00:00:00+01:00</updated><id>https://www.martinklein.co/2022/02/18/latex-in-jekyll</id><content type="html" xml:base="https://www.martinklein.co/2022/02/18/latex-in-jekyll.html">&lt;p&gt;&lt;a href=&quot;http://docs.mathjax.org/en/v2.7-latest/start.html#using-a-content-delivery-network-cdn&quot;&gt;MathJax&lt;/a&gt; allows you to include mathematics in your web pages, e.g. by using LaTeX. The formulae will be processed using JavaScript to produce HTML, SVG, or MathML equations for viewing in any modern browser.&lt;/p&gt;

&lt;p&gt;It’s very easy to include it into your Jekyll posts. Add the following script to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/post.html&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voilà, you should be good to go. If you now type in your post:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$$&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;it will render nicely as &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler%27s_identity&quot;&gt;Euler’s identity&lt;/a&gt; as we all know it:
\(e^{i\pi} + 1 = 0\).&lt;/p&gt;

&lt;p&gt;Cool! Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$$&lt;/code&gt; is required at the beginning and end. It will signify the start and end of the formula formatting.&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="jekyll" /><category term="latex" /><summary type="html">MathJax allows you to include mathematics in your web pages, e.g. by using LaTeX. The formulae will be processed using JavaScript to produce HTML, SVG, or MathML equations for viewing in any modern browser.</summary></entry><entry><title type="html">Teaching computers to see</title><link href="https://www.martinklein.co/2021/09/08/vision.html" rel="alternate" type="text/html" title="Teaching computers to see" /><published>2021-09-08T00:00:00+02:00</published><updated>2021-09-08T00:00:00+02:00</updated><id>https://www.martinklein.co/2021/09/08/vision</id><content type="html" xml:base="https://www.martinklein.co/2021/09/08/vision.html">&lt;p&gt;Applying a computer vision algorithm to some iconic and some not so iconic images.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/hopper_new.jpg&quot; alt=&quot;Edward Hopper - Nighthawks. 4 persons, 1 bottle&quot; title=&quot;Edward Hopper - Nighthawks. 4 persons, 1 bottle&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/Aldrin_Apollo_11_new.jpg&quot; alt=&quot;Buzz Aldrin - Apollo 11. 1 person&quot; title=&quot;Buzz Aldrin - Apollo 11. 1 person&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/17_juni_new.jpg&quot; alt=&quot;Revolt of 17th of June 1953, Berlin. 3 persons&quot; title=&quot;Revolt of 17th of June 1953, Berlin. 3 persons&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/bedroom_new.jpg&quot; alt=&quot;Vincent van Gogh - The Bedroom. 1 bed&quot; title=&quot;Vincent van Gogh - The Bedroom. 1 bed&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/camouflage_new.jpg&quot; alt=&quot;2 soldiers in camouflage. Potted plant, elephant, person, giraffe.&quot; title=&quot;2 soldiers in camouflage. Potted plant, elephant, person, giraffe.&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/Pieter_Bruegel_new.jpg&quot; alt=&quot;Pieter Bruegel - Children’s Games. Many persons&quot; title=&quot;Pieter Bruegel - Children’s Games. Many persons&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/cv/xian_new.jpg&quot; alt=&quot;Terracotta Army, China. Many persons&quot; title=&quot;Terracotta Army, China. Many persons&quot; class=&quot;image-quer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="art" /><category term="ml" /><summary type="html">Applying a computer vision algorithm to some iconic and some not so iconic images.</summary></entry></feed>